(ns donut.frontend.routes
  (:require
   #?@(:clj [[clojure.java.io :as io]
             [clojure.pprint :as pp]
             [clojure.walk :as walk]])
   [donut.frontend.routes.protocol :as drp]))

(def frontend-router nil)
(def sync-router nil)

(defn path
  [route-name & [route-params query-params]]
  (drp/path frontend-router route-name route-params query-params))

(defn route
  [path-or-name & [route-params query-params]]
  (drp/route frontend-router path-or-name route-params query-params))

(defn api-path
  [route-name & [route-params query-params]]
  (drp/path sync-router route-name route-params query-params))

(defn req-id
  [route-name & [route-params]]
  (drp/req-id sync-router route-name route-params))

(defn start-frontend-router
  [{:keys [:donut.system/config]}]
  (set! frontend-router (drp/router config)))

(defn start-sync-router
  [{:keys [:donut.system/config]}]
  (set! sync-router (drp/router config)))

#?(:clj
   (do
     (def route-registry (atom []))
     (defmacro register-routes
       [routes]
       (reset! route-registry routes)
       routes)
     (defn write-routes
       []
       (io/make-parents "src/donut/generated/frontend_routes.cljc")
       (let [allowed-keys #{:name :ent-type :id-key}]
         (spit "src/donut/generated/frontend_routes.cljc"
               (str "(ns donut.generated.frontend-routes
  \"do not modify this! this is auto-generated by donut. it contains frontend routes for the backend to read.\")

(def routes
"
                    (with-out-str
                      (pp/pprint
                       (walk/postwalk (fn [x]
                                        (if (map? x)
                                          (select-keys x allowed-keys)
                                          x))
                                      @route-registry)))
                    ")"))))))
